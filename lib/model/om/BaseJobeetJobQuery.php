<?php


/**
 * Base class that represents a query for the 'jobeet_job' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.3 on:
 *
 * Mon Jan 23 01:05:28 2012
 *
 * @method     JobeetJobQuery orderById($order = Criteria::ASC) Order by the id column
 * @method     JobeetJobQuery orderByCategoryId($order = Criteria::ASC) Order by the category_id column
 * @method     JobeetJobQuery orderByType($order = Criteria::ASC) Order by the type column
 * @method     JobeetJobQuery orderByCompany($order = Criteria::ASC) Order by the company column
 * @method     JobeetJobQuery orderByLogo($order = Criteria::ASC) Order by the logo column
 * @method     JobeetJobQuery orderByUrl($order = Criteria::ASC) Order by the url column
 * @method     JobeetJobQuery orderByPosition($order = Criteria::ASC) Order by the position column
 * @method     JobeetJobQuery orderByLocation($order = Criteria::ASC) Order by the location column
 * @method     JobeetJobQuery orderByDescription($order = Criteria::ASC) Order by the description column
 * @method     JobeetJobQuery orderByHowToApply($order = Criteria::ASC) Order by the how_to_apply column
 * @method     JobeetJobQuery orderByToken($order = Criteria::ASC) Order by the token column
 * @method     JobeetJobQuery orderByIsPublic($order = Criteria::ASC) Order by the is_public column
 * @method     JobeetJobQuery orderByIsActivated($order = Criteria::ASC) Order by the is_activated column
 * @method     JobeetJobQuery orderByEmail($order = Criteria::ASC) Order by the email column
 * @method     JobeetJobQuery orderByExpiresAt($order = Criteria::ASC) Order by the expires_at column
 * @method     JobeetJobQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method     JobeetJobQuery orderByUpdatedAt($order = Criteria::ASC) Order by the updated_at column
 *
 * @method     JobeetJobQuery groupById() Group by the id column
 * @method     JobeetJobQuery groupByCategoryId() Group by the category_id column
 * @method     JobeetJobQuery groupByType() Group by the type column
 * @method     JobeetJobQuery groupByCompany() Group by the company column
 * @method     JobeetJobQuery groupByLogo() Group by the logo column
 * @method     JobeetJobQuery groupByUrl() Group by the url column
 * @method     JobeetJobQuery groupByPosition() Group by the position column
 * @method     JobeetJobQuery groupByLocation() Group by the location column
 * @method     JobeetJobQuery groupByDescription() Group by the description column
 * @method     JobeetJobQuery groupByHowToApply() Group by the how_to_apply column
 * @method     JobeetJobQuery groupByToken() Group by the token column
 * @method     JobeetJobQuery groupByIsPublic() Group by the is_public column
 * @method     JobeetJobQuery groupByIsActivated() Group by the is_activated column
 * @method     JobeetJobQuery groupByEmail() Group by the email column
 * @method     JobeetJobQuery groupByExpiresAt() Group by the expires_at column
 * @method     JobeetJobQuery groupByCreatedAt() Group by the created_at column
 * @method     JobeetJobQuery groupByUpdatedAt() Group by the updated_at column
 *
 * @method     JobeetJobQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     JobeetJobQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     JobeetJobQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     JobeetJobQuery leftJoinJobeetCategory($relationAlias = null) Adds a LEFT JOIN clause to the query using the JobeetCategory relation
 * @method     JobeetJobQuery rightJoinJobeetCategory($relationAlias = null) Adds a RIGHT JOIN clause to the query using the JobeetCategory relation
 * @method     JobeetJobQuery innerJoinJobeetCategory($relationAlias = null) Adds a INNER JOIN clause to the query using the JobeetCategory relation
 *
 * @method     JobeetJob findOne(PropelPDO $con = null) Return the first JobeetJob matching the query
 * @method     JobeetJob findOneOrCreate(PropelPDO $con = null) Return the first JobeetJob matching the query, or a new JobeetJob object populated from the query conditions when no match is found
 *
 * @method     JobeetJob findOneById(int $id) Return the first JobeetJob filtered by the id column
 * @method     JobeetJob findOneByCategoryId(int $category_id) Return the first JobeetJob filtered by the category_id column
 * @method     JobeetJob findOneByType(string $type) Return the first JobeetJob filtered by the type column
 * @method     JobeetJob findOneByCompany(string $company) Return the first JobeetJob filtered by the company column
 * @method     JobeetJob findOneByLogo(string $logo) Return the first JobeetJob filtered by the logo column
 * @method     JobeetJob findOneByUrl(string $url) Return the first JobeetJob filtered by the url column
 * @method     JobeetJob findOneByPosition(string $position) Return the first JobeetJob filtered by the position column
 * @method     JobeetJob findOneByLocation(string $location) Return the first JobeetJob filtered by the location column
 * @method     JobeetJob findOneByDescription(string $description) Return the first JobeetJob filtered by the description column
 * @method     JobeetJob findOneByHowToApply(string $how_to_apply) Return the first JobeetJob filtered by the how_to_apply column
 * @method     JobeetJob findOneByToken(string $token) Return the first JobeetJob filtered by the token column
 * @method     JobeetJob findOneByIsPublic(boolean $is_public) Return the first JobeetJob filtered by the is_public column
 * @method     JobeetJob findOneByIsActivated(boolean $is_activated) Return the first JobeetJob filtered by the is_activated column
 * @method     JobeetJob findOneByEmail(string $email) Return the first JobeetJob filtered by the email column
 * @method     JobeetJob findOneByExpiresAt(string $expires_at) Return the first JobeetJob filtered by the expires_at column
 * @method     JobeetJob findOneByCreatedAt(string $created_at) Return the first JobeetJob filtered by the created_at column
 * @method     JobeetJob findOneByUpdatedAt(string $updated_at) Return the first JobeetJob filtered by the updated_at column
 *
 * @method     array findById(int $id) Return JobeetJob objects filtered by the id column
 * @method     array findByCategoryId(int $category_id) Return JobeetJob objects filtered by the category_id column
 * @method     array findByType(string $type) Return JobeetJob objects filtered by the type column
 * @method     array findByCompany(string $company) Return JobeetJob objects filtered by the company column
 * @method     array findByLogo(string $logo) Return JobeetJob objects filtered by the logo column
 * @method     array findByUrl(string $url) Return JobeetJob objects filtered by the url column
 * @method     array findByPosition(string $position) Return JobeetJob objects filtered by the position column
 * @method     array findByLocation(string $location) Return JobeetJob objects filtered by the location column
 * @method     array findByDescription(string $description) Return JobeetJob objects filtered by the description column
 * @method     array findByHowToApply(string $how_to_apply) Return JobeetJob objects filtered by the how_to_apply column
 * @method     array findByToken(string $token) Return JobeetJob objects filtered by the token column
 * @method     array findByIsPublic(boolean $is_public) Return JobeetJob objects filtered by the is_public column
 * @method     array findByIsActivated(boolean $is_activated) Return JobeetJob objects filtered by the is_activated column
 * @method     array findByEmail(string $email) Return JobeetJob objects filtered by the email column
 * @method     array findByExpiresAt(string $expires_at) Return JobeetJob objects filtered by the expires_at column
 * @method     array findByCreatedAt(string $created_at) Return JobeetJob objects filtered by the created_at column
 * @method     array findByUpdatedAt(string $updated_at) Return JobeetJob objects filtered by the updated_at column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseJobeetJobQuery extends ModelCriteria
{
	
	/**
	 * Initializes internal state of BaseJobeetJobQuery object.
	 *
	 * @param     string $dbName The dabase name
	 * @param     string $modelName The phpName of a model, e.g. 'Book'
	 * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
	 */
	public function __construct($dbName = 'propel', $modelName = 'JobeetJob', $modelAlias = null)
	{
		parent::__construct($dbName, $modelName, $modelAlias);
	}

	/**
	 * Returns a new JobeetJobQuery object.
	 *
	 * @param     string $modelAlias The alias of a model in the query
	 * @param     Criteria $criteria Optional Criteria to build the query from
	 *
	 * @return    JobeetJobQuery
	 */
	public static function create($modelAlias = null, $criteria = null)
	{
		if ($criteria instanceof JobeetJobQuery) {
			return $criteria;
		}
		$query = new JobeetJobQuery();
		if (null !== $modelAlias) {
			$query->setModelAlias($modelAlias);
		}
		if ($criteria instanceof Criteria) {
			$query->mergeWith($criteria);
		}
		return $query;
	}

	/**
	 * Find object by primary key.
	 * Propel uses the instance pool to skip the database if the object exists.
	 * Go fast if the query is untouched.
	 *
	 * <code>
	 * $obj  = $c->findPk(12, $con);
	 * </code>
	 *
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    JobeetJob|array|mixed the result, formatted by the current formatter
	 */
	public function findPk($key, $con = null)
	{
		if ($key === null) {
			return null;
		}
		if ((null !== ($obj = JobeetJobPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
			// the object is alredy in the instance pool
			return $obj;
		}
		if ($con === null) {
			$con = Propel::getConnection(JobeetJobPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
		$this->basePreSelect($con);
		if ($this->formatter || $this->modelAlias || $this->with || $this->select
		 || $this->selectColumns || $this->asColumns || $this->selectModifiers
		 || $this->map || $this->having || $this->joins) {
			return $this->findPkComplex($key, $con);
		} else {
			return $this->findPkSimple($key, $con);
		}
	}

	/**
	 * Find object by primary key using raw SQL to go fast.
	 * Bypass doSelect() and the object formatter by using generated code.
	 *
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con A connection object
	 *
	 * @return    JobeetJob A model object, or null if the key is not found
	 */
	protected function findPkSimple($key, $con)
	{
		$sql = 'SELECT `ID`, `CATEGORY_ID`, `TYPE`, `COMPANY`, `LOGO`, `URL`, `POSITION`, `LOCATION`, `DESCRIPTION`, `HOW_TO_APPLY`, `TOKEN`, `IS_PUBLIC`, `IS_ACTIVATED`, `EMAIL`, `EXPIRES_AT`, `CREATED_AT`, `UPDATED_AT` FROM `jobeet_job` WHERE `ID` = :p0';
		try {
			$stmt = $con->prepare($sql);
			$stmt->bindValue(':p0', $key, PDO::PARAM_INT);
			$stmt->execute();
		} catch (Exception $e) {
			Propel::log($e->getMessage(), Propel::LOG_ERR);
			throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
		}
		$obj = null;
		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$obj = new JobeetJob();
			$obj->hydrate($row);
			JobeetJobPeer::addInstanceToPool($obj, (string) $row[0]);
		}
		$stmt->closeCursor();

		return $obj;
	}

	/**
	 * Find object by primary key.
	 *
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con A connection object
	 *
	 * @return    JobeetJob|array|mixed the result, formatted by the current formatter
	 */
	protected function findPkComplex($key, $con)
	{
		// As the query uses a PK condition, no limit(1) is necessary.
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		$stmt = $criteria
			->filterByPrimaryKey($key)
			->doSelect($con);
		return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
	}

	/**
	 * Find objects by primary key
	 * <code>
	 * $objs = $c->findPks(array(12, 56, 832), $con);
	 * </code>
	 * @param     array $keys Primary keys to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    PropelObjectCollection|array|mixed the list of results, formatted by the current formatter
	 */
	public function findPks($keys, $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
		}
		$this->basePreSelect($con);
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		$stmt = $criteria
			->filterByPrimaryKeys($keys)
			->doSelect($con);
		return $criteria->getFormatter()->init($criteria)->format($stmt);
	}

	/**
	 * Filter the query by primary key
	 *
	 * @param     mixed $key Primary key to use for the query
	 *
	 * @return    JobeetJobQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKey($key)
	{
		return $this->addUsingAlias(JobeetJobPeer::ID, $key, Criteria::EQUAL);
	}

	/**
	 * Filter the query by a list of primary keys
	 *
	 * @param     array $keys The list of primary key to use for the query
	 *
	 * @return    JobeetJobQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKeys($keys)
	{
		return $this->addUsingAlias(JobeetJobPeer::ID, $keys, Criteria::IN);
	}

	/**
	 * Filter the query on the id column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterById(1234); // WHERE id = 1234
	 * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
	 * $query->filterById(array('min' => 12)); // WHERE id > 12
	 * </code>
	 *
	 * @param     mixed $id The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    JobeetJobQuery The current query, for fluid interface
	 */
	public function filterById($id = null, $comparison = null)
	{
		if (is_array($id) && null === $comparison) {
			$comparison = Criteria::IN;
		}
		return $this->addUsingAlias(JobeetJobPeer::ID, $id, $comparison);
	}

	/**
	 * Filter the query on the category_id column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByCategoryId(1234); // WHERE category_id = 1234
	 * $query->filterByCategoryId(array(12, 34)); // WHERE category_id IN (12, 34)
	 * $query->filterByCategoryId(array('min' => 12)); // WHERE category_id > 12
	 * </code>
	 *
	 * @see       filterByJobeetCategory()
	 *
	 * @param     mixed $categoryId The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    JobeetJobQuery The current query, for fluid interface
	 */
	public function filterByCategoryId($categoryId = null, $comparison = null)
	{
		if (is_array($categoryId)) {
			$useMinMax = false;
			if (isset($categoryId['min'])) {
				$this->addUsingAlias(JobeetJobPeer::CATEGORY_ID, $categoryId['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($categoryId['max'])) {
				$this->addUsingAlias(JobeetJobPeer::CATEGORY_ID, $categoryId['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(JobeetJobPeer::CATEGORY_ID, $categoryId, $comparison);
	}

	/**
	 * Filter the query on the type column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByType('fooValue');   // WHERE type = 'fooValue'
	 * $query->filterByType('%fooValue%'); // WHERE type LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $type The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    JobeetJobQuery The current query, for fluid interface
	 */
	public function filterByType($type = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($type)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $type)) {
				$type = str_replace('*', '%', $type);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(JobeetJobPeer::TYPE, $type, $comparison);
	}

	/**
	 * Filter the query on the company column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByCompany('fooValue');   // WHERE company = 'fooValue'
	 * $query->filterByCompany('%fooValue%'); // WHERE company LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $company The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    JobeetJobQuery The current query, for fluid interface
	 */
	public function filterByCompany($company = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($company)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $company)) {
				$company = str_replace('*', '%', $company);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(JobeetJobPeer::COMPANY, $company, $comparison);
	}

	/**
	 * Filter the query on the logo column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByLogo('fooValue');   // WHERE logo = 'fooValue'
	 * $query->filterByLogo('%fooValue%'); // WHERE logo LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $logo The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    JobeetJobQuery The current query, for fluid interface
	 */
	public function filterByLogo($logo = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($logo)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $logo)) {
				$logo = str_replace('*', '%', $logo);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(JobeetJobPeer::LOGO, $logo, $comparison);
	}

	/**
	 * Filter the query on the url column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByUrl('fooValue');   // WHERE url = 'fooValue'
	 * $query->filterByUrl('%fooValue%'); // WHERE url LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $url The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    JobeetJobQuery The current query, for fluid interface
	 */
	public function filterByUrl($url = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($url)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $url)) {
				$url = str_replace('*', '%', $url);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(JobeetJobPeer::URL, $url, $comparison);
	}

	/**
	 * Filter the query on the position column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByPosition('fooValue');   // WHERE position = 'fooValue'
	 * $query->filterByPosition('%fooValue%'); // WHERE position LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $position The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    JobeetJobQuery The current query, for fluid interface
	 */
	public function filterByPosition($position = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($position)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $position)) {
				$position = str_replace('*', '%', $position);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(JobeetJobPeer::POSITION, $position, $comparison);
	}

	/**
	 * Filter the query on the location column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByLocation('fooValue');   // WHERE location = 'fooValue'
	 * $query->filterByLocation('%fooValue%'); // WHERE location LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $location The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    JobeetJobQuery The current query, for fluid interface
	 */
	public function filterByLocation($location = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($location)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $location)) {
				$location = str_replace('*', '%', $location);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(JobeetJobPeer::LOCATION, $location, $comparison);
	}

	/**
	 * Filter the query on the description column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByDescription('fooValue');   // WHERE description = 'fooValue'
	 * $query->filterByDescription('%fooValue%'); // WHERE description LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $description The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    JobeetJobQuery The current query, for fluid interface
	 */
	public function filterByDescription($description = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($description)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $description)) {
				$description = str_replace('*', '%', $description);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(JobeetJobPeer::DESCRIPTION, $description, $comparison);
	}

	/**
	 * Filter the query on the how_to_apply column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByHowToApply('fooValue');   // WHERE how_to_apply = 'fooValue'
	 * $query->filterByHowToApply('%fooValue%'); // WHERE how_to_apply LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $howToApply The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    JobeetJobQuery The current query, for fluid interface
	 */
	public function filterByHowToApply($howToApply = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($howToApply)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $howToApply)) {
				$howToApply = str_replace('*', '%', $howToApply);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(JobeetJobPeer::HOW_TO_APPLY, $howToApply, $comparison);
	}

	/**
	 * Filter the query on the token column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByToken('fooValue');   // WHERE token = 'fooValue'
	 * $query->filterByToken('%fooValue%'); // WHERE token LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $token The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    JobeetJobQuery The current query, for fluid interface
	 */
	public function filterByToken($token = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($token)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $token)) {
				$token = str_replace('*', '%', $token);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(JobeetJobPeer::TOKEN, $token, $comparison);
	}

	/**
	 * Filter the query on the is_public column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByIsPublic(true); // WHERE is_public = true
	 * $query->filterByIsPublic('yes'); // WHERE is_public = true
	 * </code>
	 *
	 * @param     boolean|string $isPublic The value to use as filter.
	 *              Non-boolean arguments are converted using the following rules:
	 *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
	 *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
	 *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    JobeetJobQuery The current query, for fluid interface
	 */
	public function filterByIsPublic($isPublic = null, $comparison = null)
	{
		if (is_string($isPublic)) {
			$is_public = in_array(strtolower($isPublic), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
		}
		return $this->addUsingAlias(JobeetJobPeer::IS_PUBLIC, $isPublic, $comparison);
	}

	/**
	 * Filter the query on the is_activated column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByIsActivated(true); // WHERE is_activated = true
	 * $query->filterByIsActivated('yes'); // WHERE is_activated = true
	 * </code>
	 *
	 * @param     boolean|string $isActivated The value to use as filter.
	 *              Non-boolean arguments are converted using the following rules:
	 *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
	 *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
	 *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    JobeetJobQuery The current query, for fluid interface
	 */
	public function filterByIsActivated($isActivated = null, $comparison = null)
	{
		if (is_string($isActivated)) {
			$is_activated = in_array(strtolower($isActivated), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
		}
		return $this->addUsingAlias(JobeetJobPeer::IS_ACTIVATED, $isActivated, $comparison);
	}

	/**
	 * Filter the query on the email column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByEmail('fooValue');   // WHERE email = 'fooValue'
	 * $query->filterByEmail('%fooValue%'); // WHERE email LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $email The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    JobeetJobQuery The current query, for fluid interface
	 */
	public function filterByEmail($email = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($email)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $email)) {
				$email = str_replace('*', '%', $email);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(JobeetJobPeer::EMAIL, $email, $comparison);
	}

	/**
	 * Filter the query on the expires_at column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByExpiresAt('2011-03-14'); // WHERE expires_at = '2011-03-14'
	 * $query->filterByExpiresAt('now'); // WHERE expires_at = '2011-03-14'
	 * $query->filterByExpiresAt(array('max' => 'yesterday')); // WHERE expires_at > '2011-03-13'
	 * </code>
	 *
	 * @param     mixed $expiresAt The value to use as filter.
	 *              Values can be integers (unix timestamps), DateTime objects, or strings.
	 *              Empty strings are treated as NULL.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    JobeetJobQuery The current query, for fluid interface
	 */
	public function filterByExpiresAt($expiresAt = null, $comparison = null)
	{
		if (is_array($expiresAt)) {
			$useMinMax = false;
			if (isset($expiresAt['min'])) {
				$this->addUsingAlias(JobeetJobPeer::EXPIRES_AT, $expiresAt['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($expiresAt['max'])) {
				$this->addUsingAlias(JobeetJobPeer::EXPIRES_AT, $expiresAt['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(JobeetJobPeer::EXPIRES_AT, $expiresAt, $comparison);
	}

	/**
	 * Filter the query on the created_at column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
	 * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
	 * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
	 * </code>
	 *
	 * @param     mixed $createdAt The value to use as filter.
	 *              Values can be integers (unix timestamps), DateTime objects, or strings.
	 *              Empty strings are treated as NULL.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    JobeetJobQuery The current query, for fluid interface
	 */
	public function filterByCreatedAt($createdAt = null, $comparison = null)
	{
		if (is_array($createdAt)) {
			$useMinMax = false;
			if (isset($createdAt['min'])) {
				$this->addUsingAlias(JobeetJobPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($createdAt['max'])) {
				$this->addUsingAlias(JobeetJobPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(JobeetJobPeer::CREATED_AT, $createdAt, $comparison);
	}

	/**
	 * Filter the query on the updated_at column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByUpdatedAt('2011-03-14'); // WHERE updated_at = '2011-03-14'
	 * $query->filterByUpdatedAt('now'); // WHERE updated_at = '2011-03-14'
	 * $query->filterByUpdatedAt(array('max' => 'yesterday')); // WHERE updated_at > '2011-03-13'
	 * </code>
	 *
	 * @param     mixed $updatedAt The value to use as filter.
	 *              Values can be integers (unix timestamps), DateTime objects, or strings.
	 *              Empty strings are treated as NULL.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    JobeetJobQuery The current query, for fluid interface
	 */
	public function filterByUpdatedAt($updatedAt = null, $comparison = null)
	{
		if (is_array($updatedAt)) {
			$useMinMax = false;
			if (isset($updatedAt['min'])) {
				$this->addUsingAlias(JobeetJobPeer::UPDATED_AT, $updatedAt['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($updatedAt['max'])) {
				$this->addUsingAlias(JobeetJobPeer::UPDATED_AT, $updatedAt['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(JobeetJobPeer::UPDATED_AT, $updatedAt, $comparison);
	}

	/**
	 * Filter the query by a related JobeetCategory object
	 *
	 * @param     JobeetCategory|PropelCollection $jobeetCategory The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    JobeetJobQuery The current query, for fluid interface
	 */
	public function filterByJobeetCategory($jobeetCategory, $comparison = null)
	{
		if ($jobeetCategory instanceof JobeetCategory) {
			return $this
				->addUsingAlias(JobeetJobPeer::CATEGORY_ID, $jobeetCategory->getId(), $comparison);
		} elseif ($jobeetCategory instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(JobeetJobPeer::CATEGORY_ID, $jobeetCategory->toKeyValue('PrimaryKey', 'Id'), $comparison);
		} else {
			throw new PropelException('filterByJobeetCategory() only accepts arguments of type JobeetCategory or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the JobeetCategory relation
	 *
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    JobeetJobQuery The current query, for fluid interface
	 */
	public function joinJobeetCategory($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('JobeetCategory');

		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}

		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'JobeetCategory');
		}

		return $this;
	}

	/**
	 * Use the JobeetCategory relation JobeetCategory object
	 *
	 * @see       useQuery()
	 *
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    JobeetCategoryQuery A secondary query class using the current class as primary query
	 */
	public function useJobeetCategoryQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		return $this
			->joinJobeetCategory($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'JobeetCategory', 'JobeetCategoryQuery');
	}

	/**
	 * Exclude object from result
	 *
	 * @param     JobeetJob $jobeetJob Object to remove from the list of results
	 *
	 * @return    JobeetJobQuery The current query, for fluid interface
	 */
	public function prune($jobeetJob = null)
	{
		if ($jobeetJob) {
			$this->addUsingAlias(JobeetJobPeer::ID, $jobeetJob->getId(), Criteria::NOT_EQUAL);
		}

		return $this;
	}

} // BaseJobeetJobQuery